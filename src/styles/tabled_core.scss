// Styles specific for the component, not including theming.

:root {
  // This is the width for most columns, adjust this value as needed.
  --tabled-column-min-width: 163px;
  // If the cell height surpasses the threshold, the width is changed to this
  // larger size. (using JS)
  --tabled-column-min-width-large: 300px;
  --tabled-column-min-width-small: 80px;

  --tabled-v-space-4xs: 1rem;
  --tabled-v-space-3xs: 1.5rem;
  --tabled-v-space-2xs: 2rem;
  --tabled-v-space-xs: 2.5rem;
  --tabled-v-space-s: 3rem;

  --tabled-color-white: #ffffff;
  --tabled-color-black: #000000;
  --tabled-color-50: #f6f8f9;
  --tabled-color-150: #dde4e9;
  --tabled-color-500: #3f6076;
  --tabled-color-600: #19405b;
  --tabled-color-700: #15354c;
  --tabled-color-ascent: #e0a624;
  --tabled-color-focus: #3d8eff;
  --tabled-color-disabled: #a1a1a1;
  --tabled-color-border: var(--tabled-color-700);
}

$breakpoint-large: 1024px;

@mixin visually-hidden {
  padding: 0;
  margin: -1px;
  white-space: nowrap;
  border: 0;
  position: absolute !important;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  width: 1px;
  height: 1px;
  word-wrap: normal;
}

.visually-hidden {
  @include visually-hidden;
}

.tabled {
  position: relative;
  padding-top: var(--tabled-v-space-4xs);
  overflow: hidden;

  &:before,
  &:after {
    content: "";
    position: absolute;
    top: var(--tabled-v-space-s);
    width: 10%;
    height: 100%;
    background: transparent;
    z-index: 1;
    will-change: opacity ;
    transition: opacity 0.4s;
    opacity: 0;
    pointer-events: none;
    font-weight: 600;
  }

  &:before {
    left: 0;
    background: linear-gradient(90deg, rgba(7, 23, 46, 0.1), rgba(0, 0, 0, 0));
  }

  &:after {
    right: 0;
    background: linear-gradient(-90deg, rgba(7, 23, 46, 0.1), rgba(0, 0, 0, 0));
  }

  .tabled__navigation {
    position: relative;
    height: var(--tabled-v-space-xs);
    width: 100%;
    padding-block: var(--tabled-v-space-4xs);
    background: var(--tabled-color-white);
    z-index: 4;
  }

  .tabled__previous,
  .tabled__next {
    display: none;
    position: absolute;
    top: var(--tabled-v-space-4xs);
    right: 0;
    width: var(--tabled-v-space-xs);
    height: var(--tabled-v-space-xs);
    background: var(--tabled-color-white);
    border: 2px solid var(--tabled-color-border);
    padding: 0;
    margin: 0;
    line-height: 100%;
    transition: border 0.3s ease-in;
    outline-offset: -3px;
    cursor: pointer;

    &:before {
      transition: border, color 0.3s ease-in;
    }

    &:disabled {
      border: 2px solid var(--tabled-color-150);
      cursor: default;
    }

    &:hover:not(:disabled) {
      border-color: var(--tabled-color-ascent);

      &:before {
        color: var(--tabled-color-ascent);
      }
    }

    &:focus {
      outline: 2px solid var(--tabled-color-focus);
    }
  }

  &.tabled--fade-left,
  &.tabled--fade-right {
    .tabled__previous,
    .tabled__next {
      display: block;
    }

    .tabled__wrapper {
      overflow-x: scroll;
      overflow-y: visible;
    }
  }

  .tabled__previous {
    right: var(--tabled-v-space-s);

    &:before {
      font-family: Arial, Helvetica, sans-serif;
      display: inline-block;
      content: "\2190";
      font-size: 24px;
    }

    &:disabled {
      &:before {
        color: var(--tabled-color-disabled);
      }
    }
  }

  .tabled__next {
    &:before {
      font-family: Arial, Helvetica, sans-serif;
      display: inline-block;
      content: "\2192";
      font-size: 24px;
    }

    &:disabled {
      &:before {
        color: var(--tabled-color-disabled);
      }
    }
  }

  &.tabled--fade-left {
    &:before {
      opacity: 1;
      z-index: 3;
    }
  }

  &.tabled--fade-right {
    &:after {
      opacity: 1;
      z-index: 3;
    }
  }
}

table.tabled__table {
  height: auto;
  width: auto;
  min-width: 100%;
  margin: 0;
  border-spacing: 0;

  position: relative;
  table-layout: fixed;

  th {
    text-transform: capitalize;
  }

  th,
  td {
    min-width: var(--tabled-column-min-width);
  }

  .tabled__column--large {
    min-width: var(--tabled-column-min-width-large);
  }

  .tabled__column--small {
    min-width: var(--tabled-column-min-width-small);
  }
}

// Stacked CSS version, used as a fallback.
.tabled--stacked {
  th,
  td {
    display: flex;
    flex-flow: column wrap;

    @media (min-width: $breakpoint-large) {
      display: table-cell;
    }

    &:before {
      display: block;
      content: attr(data-label);
      @media (min-width: $breakpoint-large) {
        display: none;
      }
    }
  }

  tr {
    @media (min-width: $breakpoint-large) {
      display: table-row;
    }
  }

  thead th {
    @media (max-width: $breakpoint-large) {
      @include visually-hidden;
      padding: 0;
    }
  }
}
